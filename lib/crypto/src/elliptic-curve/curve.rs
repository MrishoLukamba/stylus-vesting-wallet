//! Curve traits.
use core::{fmt::Debug, ops::ShrAssign};

use super::{arithmetic::PointArithmetic, field::Field};

/// Elliptic curve.
///
/// This trait is intended to be impl'd by a ZST which represents a concrete
/// elliptic curve.
///
/// Other traits in this crate which are bounded by [`Curve`] are intended to
/// be impl'd by these ZSTs.
pub trait Curve:
    'static + Copy + Clone + Debug + Default + Eq + Ord + Send + Sync
{
    /// Integer type used to represent field elements of this elliptic curve.
    type Uint: bigint::AddMod<Output = Self::Uint>
        + bigint::Encoding<Repr = [u8; 32]>
        + bigint::FixedInteger
        + bigint::NegMod<Output = Self::Uint>
        + bigint::SubMod<Output = Self::Uint>
        + bigint::Bounded
        + ShrAssign<usize>;

    /// Order of this elliptic curve, i.e. number of elements in the finite
    /// field.
    ///
    /// This is the prime `p`.
    const ORDER: Self::Uint;
}

/// Parameters for elliptic curves of prime order which can be described by the
/// short Weierstrass equation.
pub trait PrimeCurve: Curve {
    /// The type of an element of the field.
    type FieldElement: Field + From<u64>;
    /// [Point arithmetic](point_arithmetic) implementation.
    type PointArithmetic: PointArithmetic<Self>;
    /// Coefficient `a` in the curve equation.
    const EQUATION_A: Self::FieldElement;
    /// Coefficient `b` in the curve equation.
    const EQUATION_B: Self::FieldElement;
    /// Generator point's affine coordinates: `(x, y)`.
    const GENERATOR: (Self::FieldElement, Self::FieldElement);
    /// The number of elements in the cyclic subgroup generated by
    /// [`Self::GENERATOR`], the base point.
    ///
    /// This is the order `n`.
    const SUBGROUP_ORDER: Self::Uint;

    /// Whether `elem` is in the cyclic subgroup generated by
    /// [`Self::GENERATOR`] and is non-zero.
    fn is_member(elem: Self::Uint) -> bool;
}
