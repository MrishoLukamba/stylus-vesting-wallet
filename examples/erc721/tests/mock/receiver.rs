#![allow(dead_code)]
#![cfg(feature = "e2e")]
use alloy::{
    primitives::{fixed_bytes, Address},
    sol,
};
use e2e::Wallet;

sol! {
    #[allow(missing_docs)]
    // Built with Remix IDE; solc v0.8.21+commit.d9974bed
    #[sol(rpc, bytecode="60c060405234801561000f575f80fd5b5060405161072a38038061072a83398181016040528101906100319190610126565b817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166080817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152505080600481111561008a57610089610164565b5b60a081600481111561009f5761009e610164565b5b815250505050610191565b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6100e2816100ae565b81146100ec575f80fd5b50565b5f815190506100fd816100d9565b92915050565b6005811061010f575f80fd5b50565b5f8151905061012081610103565b92915050565b5f806040838503121561013c5761013b6100aa565b5b5f610149858286016100ef565b925050602061015a85828601610112565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b60805160a05161055e6101cc5f395f818160740152818160c40152818161014b01526101f301525f81816101830152610277015261055e5ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c8063eeafbddc1461002d575b5f80fd5b61004760048036038101906100429190610330565b61005d565b60405161005491906103ba565b60405180910390f35b5f60016004811115610072576100716103d3565b5b7f000000000000000000000000000000000000000000000000000000000000000060048111156100a5576100a46103d3565b5b036100ae575f80fd5b600260048111156100c2576100c16103d3565b5b7f000000000000000000000000000000000000000000000000000000000000000060048111156100f5576100f46103d3565b5b03610135576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161012c9061045a565b60405180910390fd5b60036004811115610149576101486103d3565b5b7f0000000000000000000000000000000000000000000000000000000000000000600481111561017c5761017b6103d3565b5b036101de577f00000000000000000000000000000000000000000000000000000000000000006040517f66435bc00000000000000000000000000000000000000000000000000000000081526004016101d591906103ba565b60405180910390fd5b6004808111156101f1576101f06103d3565b5b7f00000000000000000000000000000000000000000000000000000000000000006004811115610224576102236103d3565b5b0361023a575f805f61023691906104a5565b9050505b7f8cabf31d2b1b11ba52dbb302817a3c9c83e4b2a5194d35121ab1354d69f6a4cb84848460405161026d939291906104f3565b60405180910390a17f000000000000000000000000000000000000000000000000000000000000000090509392505050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6102cc826102a3565b9050919050565b6102dc816102c2565b81146102e6575f80fd5b50565b5f813590506102f7816102d3565b92915050565b5f819050919050565b61030f816102fd565b8114610319575f80fd5b50565b5f8135905061032a81610306565b92915050565b5f805f606084860312156103475761034661029f565b5b5f610354868287016102e9565b9350506020610365868287016102e9565b92505060406103768682870161031c565b9150509250925092565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6103b481610380565b82525050565b5f6020820190506103cd5f8301846103ab565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b5f82825260208201905092915050565b7f45524337323152656365697665724d6f636b3a20726576657274696e670000005f82015250565b5f610444601d83610400565b915061044f82610410565b602082019050919050565b5f6020820190508181035f83015261047181610438565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f6104af826102fd565b91506104ba836102fd565b9250826104ca576104c9610478565b5b828204905092915050565b6104de816102c2565b82525050565b6104ed816102fd565b82525050565b5f6060820190506105065f8301866104d5565b61051360208301856104d5565b61052060408301846104e4565b94935050505056fea264697066735822122088f858935ae6fe795cd6acc39d490e616c144b4adea3d7a02cf02df68ce11c4864736f6c63430008150033")]
    contract ERC721ReceiverMock is IERC721Receiver {
        enum RevertType {
            None,
            RevertWithoutMessage,
            RevertWithMessage,
            RevertWithCustomError,
            Panic
        }

        bytes4 private immutable _retval;
        RevertType private immutable _error;

        #[derive(Debug, PartialEq)]
        event Received(address operator, address from, uint256 tokenId);

        error CustomError(bytes4);

        constructor(bytes4 retval, RevertType error) {
            _retval = retval;
            _error = error;
        }

        function onERC721Received(
            address operator,
            address from,
            uint256 tokenId
        ) public returns (bytes4) {
            if (_error == RevertType.RevertWithoutMessage) {
                revert();
            } else if (_error == RevertType.RevertWithMessage) {
                revert("ERC721ReceiverMock: reverting");
            } else if (_error == RevertType.RevertWithCustomError) {
                revert CustomError(_retval);
            } else if (_error == RevertType.Panic) {
                uint256 a = uint256(0) / uint256(0);
                a;
            }

            emit Received(operator, from, tokenId);
            return _retval;
        }
    }
}

pub async fn deploy(
    wallet: &Wallet,
    error: ERC721ReceiverMock::RevertType,
) -> eyre::Result<Address> {
    let retval = fixed_bytes!("150b7a02");

    // Deploy the contract.
    let contract = ERC721ReceiverMock::deploy(wallet, retval, error).await?;
    Ok(*contract.address())
}
