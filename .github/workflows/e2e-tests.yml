# This workflow runs our end-to-end tests suite and collects coverage. It
# reuses the `e2e-setup` workflow for both. Contract deployments and account
# funding happen on a per-test basis.
name: e2e
permissions:
  contents: read
on:
  push:
    branches: [ main ]
  pull_request:
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
env:
  CARGO_TERM_COLOR: always
jobs:
  tests:
    name: tests 
    runs-on: ubuntu-latest
    uses: ./.github/workflows/e2e-setup.yml
    steps:
      - name: run integration tests
        run: |
          export NIGHTLY_TOOLCHAIN=${{steps.toolchain.outputs.name}}
          ./scripts/e2e-tests.sh

  coverage:
    name: coverage
    runs-on: ubuntu-latest
    uses: ./.github/workflows/e2e-setup.yml
    steps:
      - name: compile contracts
        run: cargo build --release --target wasm32-unknown-unknown -Z build-std=std,panic_abort -Z build-std-features=panic_immediate_abort
      - name: cargo install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: cargo generate-lockfile
        if: hashFiles('Cargo.lock') == ''
        run: cargo generate-lockfile
      - name: cargo llvm-cov
        run: RPC_URL=http://localhost:8547 cargo llvm-cov --locked --features std,e2e --test '*' --lcov --output-path lcov.info
      - name: Record Rust version
        run: echo "RUST=$(rustc --version)" >> "$GITHUB_ENV"
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
          env_vars: OS,RUST
